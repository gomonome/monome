package monome

import (
	"fmt"
	"strings"
)

// add your own letters as you like
var Letters = map[rune]map[[2]uint8]bool{}

func addLetter(r rune, pts ...[2]uint8) {
	Letters[r] = map[[2]uint8]bool{}

	for _, pt := range pts {
		Letters[r][pt] = true
	}
}

var letters = map[rune]string{
	'0': `
________
__##____
_#__#___
_#__#___
_#__#___  
_#__#___
_#__#___
__##____
`,

	'1': `
________
__##____
___#____
___#____
___#____
___#____
___#____
_#####__
`,

	'2': `
________
__###___
_#___#__
____#___
___#____
__#_____
_#______
_#####__
`,

	'3': `
________
__###___
_#___#__
_____#__
___##___
_____#__
_#___#__
__###___
`,

	'4': `
________
____#___
___##___
__#_#___
_#__#___
_#####__
____#___
___###__
`,

	'5': `
________
__####__
__#_____
__#_____
__###___
_____#__
_#___#__
__###___
`,

	'6': `
________
___###__
__#_____
_#______
_####___
_#___#__
_#___#__
__###___
`,

	'7': `
________
_#####__
_#___#__
_____#__
____#___
___ #___
___#____
___#____
`,

	'8': `
________
__###___
_#___#__
_#___#__
__###___
_#___#__
_#___#__
__###___
`,

	'9': `
________
__###___
_#___#__
_#___#__
__####__
_____#__
____#___
_###____
`,

	'a': `
________
____#___
___#_#__
___#_#__
___#_#__
__#####_
__#___#_
_##___##
`,

	'b': `
________
_######_
__#___#_
_ #___#_
__####__
__#___#_
__#___#_
_#####__
`,

	'c': `
________
___####_
__##__#_
__#_____
__#_____
__#_____
__##__#_
___####_
`,

	'd': `
________
_#####__
__#__##_
__#___#_
__#___#_
__#___#_
__#__##_
_#####__
`,

	'e': `
________
_######_
__#___#_
__#_____
__####__
__#_____
__#___#_
_######_
`,

	'f': `
________
_######_
__#___#_
__#_____
__####__
__#_____
__#_____
_###____
`,

	'g': `
________
___####_
__##__#_
__#_____
__#__###
__#___#_
__##__#_
___####_
`,

	'h': `
________
_###_###
__#___#_
__#___#_
__#####_
__#___#_
__#___#_
_###_###
`,

	'i': `
________
___###__
____#___
____#___
____#___
____#___
____#___
___###__
`,

	'j': `
________
_____#__
_____#__
_____#__
_____#__
_____#__
_____#__
__###___
`,

	'k': `
________
_###_###
__#__#__
__#_#___
__###___
__#_##__
__#__#__
_###_###
`,

	'l': `
________
_###____
__#_____
__#_____
__#_____
__#_____
__#___#_
_######_
`,

	'm': `
________
##____##
##____##
#_#__#_#
#__##__#
#__##__#
#______#
#______#
`,

	'n': `
________
_###_###
__##__#_
__#_#_#_
__#_#_#_
__#__##_
__#__##_
_###__#_
`,

	'o': `
________
__####__
_#____#_
_#____#_
_#____#_
_#____#_
_#____#_
__####__
`,

	'p': `
_#####__
__#___#_
__#___#_
__#___#_
__####__
__#_____
__#_____
_###____
`,

	'q': `
___###__
__#__##_
__#___#_
__#___#_
__#___#_
__#___#_
___###__
_____###
`,

	'r': `
________
_#####__
__#___#_
__#___#_
__####__
__#__#__
__#___#_
_###__##
`,
	's': `
________
___####_
__#_____
__#_____
___###__
______#_
_#____#_
__####__
`,
	't': `
_#######
_#__#__#
____#___
____#___
____#___
____#___
____#___
___###__
`,
	'u': `
________
_###_###
__#___#_
__#___#_
__#___#_
__#___#_
__#___#_
___###__
`,
	'v': `
_###_###
__#___#_
__#___#_
___#_#__
___#_#__
___#_#__
____#___
____#___
`,
	'w': `
________
_###_###
__#___#_
__#_#_#_
__#_#_#_
__#_#_#_
__#_#_#_
___#_#__
`,
	'x': `
________
_##___##
__#___#_
___#_#__
____#___
___#_#__
__#___#_
_##___##
`,
	'y': `
________
_###_###
__#___#_
___#_#__
____#___
____#___
____#___
___###__
`,
	'z': `
________
___####_
______#_
_____#__
____#___
____#___
___#____
___####_
`,
	'ä': `
________
__#_#___
________
_####___
____#___
__###___
_#__#___
_#####__
`,
	'ü': `
________
__#_#___
________
_#___#__
_#___#__
_#___#__
_#___#__
__###___
`,
	'ö': `
________
___#_#__
________
___##___
__#__#__
__#__#__
__#__#__
___##___
`,

	'!': `
____#___
____#___
____#___
____#___
____#___
________
____#___
________
`,
	'?': `
___###__
__#___#_
_____#__
_____#__
____#___
____#___
________
____#___
`,
	'.': `
________
________
________
________
________
________
__#_____
________
`,
	' ': `
________
________
________
________
________
________
________
________
`,
	',': `
________
________
________
________
________
__#_____
__#_____
_#______
`,
	':': `
________
________
__#_____
________
________
__#_____
________
________
`,
	'/': `
_____#__
_____#__
____#___
____#___
___#____
___#____
__#_____
__#_____
`,
	'%': `
________
_###__#_
_#_#_#__
_####___
___#____
___####_
__#_#_#_
_#__###_
`,
	'=': `
________
________
________
__####__
________
__####__
________
________
`,
	'+': `
________
________
____#___
____#___
__#####_
____#___
____#___
________
`,
	'-': `
________
________
________
________
__####__
________
________
________
`,
	'*': `
________
___#____
_#_#_#__
__###___
__###___
_#_#_#__
___#____
________
`,
	'~': `
________
________
________
__##___#
_#__#__#
_#___##_
________
________
`,
	'#': `
___#_#__
___#_#__
_######_
___#_#__
_######_
__#__#__
__#__#__
________
`,
	'&': `
________
__###___
__#_#___
__#_#___
__##____
_#####__
_#__##__
__#####_
`,
	'(': `
____#___
___#____
__#_____
__#_____
__#_____
__#_____
___#____
____#___
`,
	')': `
__#_____
___#____
____#___
____#___
____#___
____#___
___#____
__#_____
`,
	'[': `
__###___
__#_____
__#_____
__#_____
__#_____
__#_____
__#_____
__###___
`,
	']': `
___###__
_____#__
_____#__
_____#__
_____#__
_____#__
_____#__
___###__
`,
	'"': `
________
__#_#___
__#_#___
________
________
________
________
________
`,
	';': `
________
________
________
___#____
________
________
___#____
__##____
`,
	'^': `
___#____
__#_#___
________
________
________
________
________
________
`,
	'°': `
_###____
_#_#____
_###____
________
________
________
________
________
`,
	'ß': `
__###___
__#__#__
__#_#___
__##____
__#_#___
__#__#__
__###___
__#_____
`,
}

func _addLetter(rn rune, l string) {
	l = strings.TrimSpace(l)
	rows := strings.Split(l, "\n")
	if len(rows) != 8 {
		panic(fmt.Sprintf("rows must be 8 in letter %#v", string(rn)))
	}
	/*
		l = strings.Replace(l, "\n", "", -1)
		if len(l) != 64 {
			panic(fmt.Sprintf("letter must have 64 points in letter %#v, but has %v", string(rn), len(l)))
		}
	*/

	var pts [][2]uint8
	//	hash := []byte("#")[0]

	for r, row := range rows {
		for c := 0; c < 8; c++ {
			if row[c] == '#' {
				pts = append(pts, [2]uint8{uint8(r), uint8(c)})
			}
		}
	}

	addLetter(rn, pts...)
}

func init() {
	for rn, l := range letters {
		_addLetter(rn, l)
	}
	/*
		addLetter('A',
			[2]uint8{7, 7},
			[2]uint8{7, 0},
			[2]uint8{5, 6},
			[2]uint8{3, 5},
			[2]uint8{1, 4},
			[2]uint8{1, 3},
			[2]uint8{3, 2},
			[2]uint8{5, 1},
			[2]uint8{5, 5},
			[2]uint8{5, 4},
			[2]uint8{5, 3},
			[2]uint8{5, 2},
		)

		addLetter('O',
			[2]uint8{2, 6},
			[2]uint8{3, 6},
			[2]uint8{4, 6},
			[2]uint8{5, 6},
			[2]uint8{7, 5},
			[2]uint8{6, 6},
			[2]uint8{7, 4},
			[2]uint8{7, 3},
			[2]uint8{6, 1},
			[2]uint8{7, 2},
			[2]uint8{5, 1},
			[2]uint8{4, 1},
			[2]uint8{3, 1},
			[2]uint8{2, 1},
			[2]uint8{0, 2},
			[2]uint8{1, 1},
			[2]uint8{0, 3},
			[2]uint8{0, 4},
			[2]uint8{0, 5},
			[2]uint8{1, 6},
		)
	*/
}
