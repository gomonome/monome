package monome

import (
	"fmt"
	"strings"
)

// add your own letters as you like
var Letters = map[rune]map[[2]uint8]bool{}
var LetterWidth = map[rune]int{}

func addLetter(r rune, width int, pts ...[2]uint8) {
	LetterWidth[r] = width
	Letters[r] = map[[2]uint8]bool{}

	for _, pt := range pts {
		Letters[r][pt] = true
	}
}

var letters = map[rune]string{
	'0': `
_____
_##__
#__#_
#__#_
#__#_  
#__#_
#__#_
_##__
`,

	'1': `
_____
__##_
_#_#_
#__#_
___#_
___#_
___#_
___#_
`,

	'2': `
______
_###__
#___#_
___#__
__#___
_#____
#_____
#####_
`,

	'3': `
______
_###__
#___#_
____#_
__##__
____#_
#___#_
_###__
`,

	'4': `
_____
___#_
__##_
_#_#_
#__#_
####_
___#_
___#_
`,

	'5': `
_____
####_
#____
#____
###__
___#_
#__#_
_##__
`,

	'6': `
______
__##__
_#____
#_____
####__
#___#_
#___#_
_###__
`,

	'7': `
______
#####_
____#_
____#_
___#__
__ #__
__#___
__#___
`,

	'8': `
______
_###__
#___#_
#___#_
_###__
#___#_
#___#_
_###__
`,

	'9': `
______
_###__
#___#_
#___#_
_####_
____#_
#___#_
_###__
`,

	'a': `
________
___#____
__#_#___
__#_#___
__#_#___
_#####__
_#___#__
#_____#_
`,

	'b': `
______
####__
#___#_
#___#_
####__
#___#_
#___#_
####__
`,

	'c': `
_______
_####__
#____#_
#______
#______
#______
#___ #_
_####__
`,

	'd': `
______
####__
#___#_
#___#_
#___#_
#___#_
#___#_
####__
`,

	'e': `
______
#####_
#_____
#_____
####__
#_____
#_____
#####_
`,

	'f': `
______
#####_
#_____
#_____
###___
#_____
#_____
#_____
`,

	'g': `
______
_####_
#_____
#_____
#__##_
#___#_
#___#_
_####_
`,

	'h': `
______
#___#_
#___#_
#___#_
#####_
#___#_
#___#_
#___#_
`,

	'i': `
__
#_
__
#_
#_
#_
#_
#_
`,

	'j': `
_____
___#_
_____
___#_
___#_
___#_
___#_
###__
`,

	'k': `
______
#___#_
#__#__
#_#___
##____
#_#___
#__#__
#___#_
`,

	'l': `
______
#_____
#_____
#_____
#_____
#_____
#_____
#####_
`,

	'm': `
______
#___#_
##_##_
#_#_#_
#___#_
#___#_
#___#_
#___#_
`,

	'n': `
______
#___#_
##__#_
#_#_#_
#_#_#_
#__##_
#__##_
#___#_
`,

	'o': `
_______
_####__
#____#_
#____#_
#____#_
#____#_
#____#_
_####__
`,

	'p': `
______
####__
#___#_
#___#_
####__
#_____
#_____
#_____
`,

	'q': `
_______
_###___
#___#__
#___#__
#___#__
#__##__
_####__
____##_
`,

	'r': `
_______
####___
#___#__
#___#__
####___
#__#___
#___#__
#____#_
`,
	's': `
_______
__####_
_#_____
_#_____
__###__
_____#_
#____#_
_####__
`,
	't': `
________
#######_
___#____
___#____
___#____
___#____
___#____
___#____
`,
	'u': `
______
#___#_
#___#_
#___#_
#___#_
#___#_
#___#_
_###__
`,
	'v': `
________
#_____#_
_#___#__
_#___#__
__#_#___
__#_#___
___#____
___#____
`,
	'w': `
________
##___##_
_#___#__
_#_#_#__
_#_#_#__
_#_#_#__
_#_#_#__
__#_#___
`,
	'x': `
________
#_____#_
_#___#__
__#_#___
___#____
__#_#___
_#___#__
#_____#_
`,
	'y': `
________
#_____#_
_#___#__
__#_#___
___#____
___#____
___#____
___#____
`,
	'z': `
______
#####_
____#_
___#__
__#___
__#___
_#____
#####_
`,
	'ä': `
______
_#_#__
______
####__
___#__
_###__
#__#__
#####_
`,
	'ü': `
______
_#_#__
______
#___#_
#___#_
#___#_
#___#_
_###__
`,
	'ö': `
_____
#__#_
_____
_##__
#__#_
#__#_
#__#_
_##__
`,

	'!': `
__
#_
#_
#_
#_
#_
__
#_
`,
	'?': `
______
_###__
#___#_
____#_
___#__
__#___
______
__#___
`,
	'.': `
__
__
__
__
__
__
__
#_
`,
	' ': `
___
___
___
___
___
___
___
___
`,
	',': `
___
___
___
___
___
___
_#_
#__
`,
	':': `
__
__
__
#_
__
__
#_
__
`,
	'/': `
________
______#_
_____#__
____#___
___#____
__#_____
_#______
#_______
`,
	'%': `
________
_#____#_
#_#__#__
_#__#___
___#____
__#__#__
_#__#_#_
#____#__
`,
	'=': `
______
______
______
#####_
______
#####_
______
______
`,
	'+': `
______
______
__#___
__#___
#####_
__#___
__#___
______
`,
	'-': `
______
______
______
______
#####_
______
______
______
`,
	'_': `
______
______
______
______
______
______
______
#####_
`,
	'*': `
_______
___#___
_#_#_#_
__###__
__###__
_#_#_#_
___#___
_______
`,

	'>': `
____
____
#___
_#__
__#_
_#__
#___
____
`,

	'<': `
____
____
__#_
_#__
#___
_#__
__#_
____
`,
	'~': `
________
________
________
________
_##___#_
#__#__#_
#___##__
________
`,
	'#': `
______
______
_#_#__
#####_
_#_#__
#####_
_#_#__
______
`,
	'&': `
________
_###____
_#_#____
_#_#____
_##_____
#__#____
#___#_#_
_#####__
`,
	'(': `
___
___
_#_
#__
#__
#__
#__
_#_
`,
	')': `
___
___
#__
_#_
_#_
_#_
_#_
#__
`,
	'[': `
___
##_
#__
#__
#__
#__
#__
##_
`,
	']': `
___
##_
_#_
_#_
_#_
_#_
_#_
##_
`,
	'"': `
____
#_#_
#_#_
#_#_
____
____
____
____
`,

	'\'': `
__
#_
#_
#_
__
__
__
__
`,
	';': `
___
___
___
_#_
___
___
_#_
#__
`,
	'^': `
____
_#__
#_#_
____
____
____
____
____
`,
	'°': `
____
_#__
#_#_
_#__
____
____
____
____
`,
	'ß': `
_##__
#__#_
#_#__
##___
#_#__
#__#_
###__
#____
`,
}

func _addLetter(rn rune, l string) {
	//	fmt.Printf("add letter %#v\n", string(rn))
	l = strings.TrimSpace(l)
	rows := strings.Split(l, "\n")

	if len(rows) != 8 {
		panic(fmt.Sprintf("rows must be 8 in letter %#v", string(rn)))
	}

	/*
		l = strings.Replace(l, "\n", "", -1)
		if len(l) != 64 {
			panic(fmt.Sprintf("letter must have 64 points in letter %#v, but has %v", string(rn), len(l)))
		}
	*/

	width := len(rows[0])

	var pts [][2]uint8
	//	hash := []byte("#")[0]

	for r, row := range rows {
		for c := 0; c < width; c++ {
			if row[c] == '#' {
				pts = append(pts, [2]uint8{uint8(r), uint8(c)})
			}
		}
	}

	addLetter(rn, width, pts...)
}

func init() {
	for rn, l := range letters {
		_addLetter(rn, l)
	}
	/*
		addLetter('A',
			[2]uint8{7, 7},
			[2]uint8{7, 0},
			[2]uint8{5, 6},
			[2]uint8{3, 5},
			[2]uint8{1, 4},
			[2]uint8{1, 3},
			[2]uint8{3, 2},
			[2]uint8{5, 1},
			[2]uint8{5, 5},
			[2]uint8{5, 4},
			[2]uint8{5, 3},
			[2]uint8{5, 2},
		)

		addLetter('O',
			[2]uint8{2, 6},
			[2]uint8{3, 6},
			[2]uint8{4, 6},
			[2]uint8{5, 6},
			[2]uint8{7, 5},
			[2]uint8{6, 6},
			[2]uint8{7, 4},
			[2]uint8{7, 3},
			[2]uint8{6, 1},
			[2]uint8{7, 2},
			[2]uint8{5, 1},
			[2]uint8{4, 1},
			[2]uint8{3, 1},
			[2]uint8{2, 1},
			[2]uint8{0, 2},
			[2]uint8{1, 1},
			[2]uint8{0, 3},
			[2]uint8{0, 4},
			[2]uint8{0, 5},
			[2]uint8{1, 6},
		)
	*/
}
