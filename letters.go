package monome

import (
	"fmt"
	"strings"
)

// add your own letters as you like
var Letters = map[rune]map[[2]uint8]bool{}
var LetterWidth = map[rune]int{}

func addLetter(r rune, width int, pts ...[2]uint8) {
	LetterWidth[r] = width
	Letters[r] = map[[2]uint8]bool{}

	for _, pt := range pts {
		Letters[r][pt] = true
	}
}

var letters = map[rune]string{
	'0': `
______
__##__
_#__#_
_#__#_
_#__#_  
_#__#_
_#__#_
__##__
`,

	'1': `
_____
__##_
_#_#_
#__#_
___#_
___#_
___#_
___#_
`,

	'2': `
_______
__###__
_#___#_
____#__
___#___
__#____
_#_____
_#####_
`,

	'3': `
_______
__###__
_#___#_
_____#_
___##__
_____#_
_#___#_
__###__
`,

	'4': `
______
____#_
___##_
__#_#_
_#__#_
_####_
____#_
____#_
`,

	'5': `
______
_####_
_#____
_#____
_###__
____#_
_#__#_
__##__
`,

	'6': `
_______
___##__
__#____
_#_____
_####__
_#___#_
_#___#_
__###__
`,

	'7': `
_______
_#####_
_____#_
_____#_
____#__
___ #__
___#___
___#___
`,

	'8': `
_______
__###__
_#___#_
_#___#_
__###__
_#___#_
_#___#_
__###__
`,

	'9': `
_______
__###__
_#___#_
_#___#_
__####_
_____#_
_#___#_
__###__
`,

	'a': `
_______
___#___
__#_#__
__#_#__
__#_#__
_#####_
_#___#_
#_____#
`,

	'b': `
_______
_####__
_#___#_
 #___#_
_####__
_#___#_
_#___#_
_####__
`,

	'c': `
________
__####__
_#____#_
_#______
_#______
_#______
_#___ #_
__####__
`,

	'd': `
_______
_####__
_#___#_
_#___#_
_#___#_
_#___#_
_#___#_
_####__
`,

	'e': `
_______
_#####_
_#_____
_#_____
_####__
_#_____
_#_____
_#####_
`,

	'f': `
_______
_#####_
_#_____
_#_____
_###___
_#_____
_#_____
_#_____
`,

	'g': `
_______
__####_
_#_____
_#_____
_#__##_
_#___#_
_#___#_
__####_
`,

	'h': `
_______
_#___#_
_#___#_
_#___#_
_#####_
_#___#_
_#___#_
_#___#_
`,

	'i': `
_____
__#__
_____
__#__
__#__
__#__
__#__
__#__
`,

	'j': `
______
____#_
______
____#_
____#_
____#_
____#_
_###__
`,

	'k': `
_______
_#___#_
_#__#__
_#_#___
_##____
_#_#___
_#__#__
_#___#_
`,

	'l': `
_______
_#_____
_#_____
_#_____
_#_____
_#_____
_#_____
_#####_
`,

	'm': `
_______
#_____#
##___##
#_#_#_#
#__#__#
#_____#
#_____#
#_____#
`,

	'n': `
_______
_#___#_
_##__#_
_#_#_#_
_#_#_#_
_#__##_
_#__##_
_#___#_
`,

	'o': `
________
__####__
_#____#_
_#____#_
_#____#_
_#____#_
_#____#_
__####__
`,

	'p': `
_______
_####__
_#___#_
_#___#_
_####__
_#_____
_#_____
_#_____
`,

	'q': `
_______
__###__
_#___#_
_#___#_
_#___#_
_#__##_
__####_
_____##
`,

	'r': `
_______
_####__
_#___#_
_#___#_
_####__
_#__#__
_#___#_
_#____#
`,
	's': `
________
___####_
__#_____
__#_____
___###__
______#_
_#____#_
__####__
`,
	't': `
_______
#######
___#___
___#___
___#___
___#___
___#___
___#___
`,
	'u': `
_______
_#___#_
_#___#_
_#___#_
_#___#_
_#___#_
_#___#_
__###__
`,
	'v': `
_______
#_____#
_#___#_
_#___#_
__#_#__
__#_#__
___#___
___#___
`,
	'w': `
_______
##___##
_#___#_
_#_#_#_
_#_#_#_
_#_#_#_
_#_#_#_
__#_#__
`,
	'x': `
_______
#_____#
_#___#_
__#_#__
___#___
__#_#__
_#___#_
#_____#
`,
	'y': `
_______
#_____#
_#___#_
__#_#__
___#___
___#___
___#___
___#___
`,
	'z': `
_______
_#####_
_____#_
____#__
___#___
___#___
__#____
_#####_
`,
	'ä': `
_______
__#_#__
_______
_####__
____#__
__###__
_#__#__
_#####_
`,
	'ü': `
_______
__#_#__
_______
_#___#_
_#___#_
_#___#_
_#___#_
__###__
`,
	'ö': `
______
_#__#_
______
__##__
_#__#_
_#__#_
_#__#_
__##__
`,

	'!': `
_____
__#__
__#__
__#__
__#__
__#__
_____
__#__
`,
	'?': `
_______
__###__
_#___#_
_____#_
____#__
___#___
_______
___#___
`,
	'.': `
_____
_____
_____
_____
_____
_____
_____
__#__
`,
	' ': `
_____
_____
_____
_____
_____
_____
_____
_____
`,
	',': `
_____
_____
_____
_____
_____
_____
__#__
_#___
`,
	':': `
_____
_____
_____
__#__
_____
_____
__#__
_____
`,
	'/': `
_______
_____#_
____#__
___#___
___#___
__#____
__#____
_#_____
`,
	'%': `
_______
_#____#
#_#__#_
_#__#__
___#___
__#__#_
_#__#_#
#____#_
`,
	'=': `
_______
_______
_______
_#####_
_______
_#####_
_______
_______
`,
	'+': `
_______
_______
___#___
___#___
_#####_
___#___
___#___
_______
`,
	'-': `
_______
_______
_______
_______
_______
_#####_
_______
_______
`,
	'*': `
_______
___#___
_#_#_#_
__###__
__###__
_#_#_#_
___#___
_______
`,
	'~': `
_______
_______
_______
_______
_##___#
#__#__#
#___##_
_______
`,
	'#': `
_______
_______
__#_#__
_#####_
__#_#__
_#####_
__#_#__
_______
`,
	'&': `
________
__###___
__#_#___
__#_#___
__##____
_#__#___
_#___#_#
__#####_
`,
	'(': `
_______
_______
___#___
__#____
__#____
__#____
__#____
___#___
`,
	')': `
_______
_______
___#___
____#__
____#__
____#__
____#__
___#___
`,
	'[': `
______
__##__
__#___
__#___
__#___
__#___
__#___
__##__
`,
	']': `
______
__##__
___#__
___#__
___#__
___#__
___#__
__##__
`,
	'"': `
_______
__#_#__
__#_#__
__#_#__
_______
_______
_______
_______
`,

	'\'': `
_____
__#__
__#__
__#__
_____
_____
_____
_____
`,
	';': `
______
______
______
___#__
______
______
___#__
__#___
`,
	'^': `
_______
___#___
__#_#__
_______
_______
_______
_______
_______
`,
	'°': `
______
__#___
_#_#__
__#___
______
______
______
______
`,
	'ß': `
__##__
_#__#_
_#_#__
_##___
_#_#__
_#__#_
_###__
_#____
`,
}

func _addLetter(rn rune, l string) {
	//	fmt.Printf("add letter %#v\n", string(rn))
	l = strings.TrimSpace(l)
	rows := strings.Split(l, "\n")

	if len(rows) != 8 {
		panic(fmt.Sprintf("rows must be 8 in letter %#v", string(rn)))
	}

	/*
		l = strings.Replace(l, "\n", "", -1)
		if len(l) != 64 {
			panic(fmt.Sprintf("letter must have 64 points in letter %#v, but has %v", string(rn), len(l)))
		}
	*/

	width := len(rows[0])

	var pts [][2]uint8
	//	hash := []byte("#")[0]

	for r, row := range rows {
		for c := 0; c < width; c++ {
			if row[c] == '#' {
				pts = append(pts, [2]uint8{uint8(r), uint8(c)})
			}
		}
	}

	addLetter(rn, width, pts...)
}

func init() {
	for rn, l := range letters {
		_addLetter(rn, l)
	}
	/*
		addLetter('A',
			[2]uint8{7, 7},
			[2]uint8{7, 0},
			[2]uint8{5, 6},
			[2]uint8{3, 5},
			[2]uint8{1, 4},
			[2]uint8{1, 3},
			[2]uint8{3, 2},
			[2]uint8{5, 1},
			[2]uint8{5, 5},
			[2]uint8{5, 4},
			[2]uint8{5, 3},
			[2]uint8{5, 2},
		)

		addLetter('O',
			[2]uint8{2, 6},
			[2]uint8{3, 6},
			[2]uint8{4, 6},
			[2]uint8{5, 6},
			[2]uint8{7, 5},
			[2]uint8{6, 6},
			[2]uint8{7, 4},
			[2]uint8{7, 3},
			[2]uint8{6, 1},
			[2]uint8{7, 2},
			[2]uint8{5, 1},
			[2]uint8{4, 1},
			[2]uint8{3, 1},
			[2]uint8{2, 1},
			[2]uint8{0, 2},
			[2]uint8{1, 1},
			[2]uint8{0, 3},
			[2]uint8{0, 4},
			[2]uint8{0, 5},
			[2]uint8{1, 6},
		)
	*/
}
